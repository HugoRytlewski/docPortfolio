<%@ Page Title="√âditeur de Lettres Types" Language="C#" MasterPageFile="~/composant/nav.Master" AutoEventWireup="true" CodeBehind="editor.aspx.cs" Inherits="LettresTypes.pages.editor" %>
<asp:Content ID="Content1" ContentPlaceHolderID="head" runat="server">
    <link href="../styles/editor.css" rel="stylesheet" />
</asp:Content>
<asp:Content ID="Content2" ContentPlaceHolderID="ContentPlaceHolder1" runat="server">
    <div class="divh1">
        <h1 class="title">Lettres Types - S√©lection d'une lettre</h1>
    </div>

    <div class="page">
        <div class="editor-container">
            <a class="backRep" href="detailLettres.aspx">Retour</a>

            <div class="toolbar">
                <button type="button" onclick="execCmd('bold')" title="Gras"><b>G</b></button>
                <button type="button" onclick="execCmd('italic')" title="Italique"><i>I</i></button>
                <button type="button" onclick="execCmd('underline')" title="Soulign√©"><u>S</u></button>
                <button type="button" onclick="execCmd('insertUnorderedList')" title="Liste √† puces">‚Ä¢ Liste</button>
                <button type="button" onclick="execCmd('insertOrderedList')" title="Liste num√©rot√©e">1. Liste</button>
                <button type="button" onclick="execCmd('justifyLeft')" title="Align√© √† gauche">‚â° Gauche</button>
                <button type="button" onclick="execCmd('justifyCenter')" title="Centr√©">‚â° Centre</button>
                <button type="button" onclick="execCmd('justifyRight')" title="Align√© √† droite">‚â° Droite</button>
                <button type="button" onclick="openInsertFieldModal()" title="Ajouter un champ">+ Champ</button>
                <button type="button" onclick="document.getElementById('imageUploader').click()">üñºÔ∏è Image</button>
                <button type="button" onclick="insertHeader()">üìÑ En-t√™te</button>
                <button type="button" onclick="insertFooter()">üìÑ Pied</button>
            </div>

            <div id="editor" contenteditable="true">
                <asp:Literal ID="LiteralContent" runat="server"></asp:Literal>
            </div>

            <div class="save-section">
                <asp:HiddenField ClientIDMode="Static" ID="HiddenHtmlContent" runat="server" />
                <asp:Button ID="btnSave" ClientIDMode="Static" runat="server" Text="Enregistrer" OnClick="btnSave_Click" CssClass="btn-save" />
                <asp:Button ID="btnVisu" ClientIDMode="Static" runat="server" Text="Visualiser" OnClick="btnVisualiser" CssClass="btn-preview" />
            </div>
        </div>

        <input type="file" id="imageUploader" accept="image/*" style="display:none" onchange="handleImageUpload(this)" />

        <!-- Modale Ajout Champ -->
        <div class="modal" id="insertFieldModal">
            <div class="modal-content">
                <span class="close-modal" onclick="closeInsertFieldModal()">&times;</span>
                <h4>Ajouter un nouveau champ</h4>
                <div class="form-group">
                    <label>Type de champ :</label>
                    <select id="newFieldType" class="form-control" onchange="updateFieldLabel('new')">
                        <option value="Text">Texte</option>
                        <option value="Nombre">Nombre</option>
                        <option value="Date">Date</option>
                        <option value="SELECT">Liste d√©roulante</option>
                        <option value="CodePostal">Code postal</option>
                        <option value="Ville">Ville</option>
                        <option value="PC">Comptable</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Libell√© :</label>
                    <input type="text" id="newFieldLabel" class="form-control" placeholder="Nom du champ..." />
                </div>
                <div class="form-check">
                    <input type="checkbox" id="newFieldRequired" class="form-check-input" />
                    <label class="form-check-label">Obligatoire</label>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" onclick="insertNewField()">Ins√©rer</button>
                    <button type="button" class="btn btn-secondary" onclick="closeInsertFieldModal()">Annuler</button>
                </div>
            </div>
        </div>

        <!-- Modale √âdition Champ -->
        <div class="modal" id="editFieldModal">
            <div class="modal-content">
                <span class="close-modal" onclick="closeEditFieldModal()">&times;</span>
                <h4>Modifier le champ</h4>
                <div class="form-group">
                    <label>Type de champ :</label>
                    <select id="editFieldType" class="form-control" onchange="updateFieldLabel('edit')">
                        <option value="Text">Texte</option>
                        <option value="Nombre">Nombre</option>
                        <option value="Date">Date</option>
                        <option value="SELECT">Liste d√©roulante</option>
                        <option value="CodePostal">Code postal</option>
                        <option value="Ville">Ville</option>
                        <option value="PC">Comptable</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Libell√© :</label>
                    <input type="text" id="editFieldLabel" class="form-control" />
                </div>
                <div class="form-check">
                    <input type="checkbox" id="editFieldRequired" class="form-check-input" />
                    <label class="form-check-label">Obligatoire</label>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" onclick="applyFieldChanges()">Appliquer</button>
                    <button type="button" class="btn btn-danger" onclick="deleteField()">Supprimer</button>
                    <button type="button" class="btn btn-secondary" onclick="closeEditFieldModal()">Annuler</button>
                </div>
            </div>
        </div>
    </div>

    <div id="fieldPreview" class="field-preview">[Champ]</div>

    <script>
        // Variables globales
        let editor, fieldPreview, currentField, isInsertingField = false;
        let pendingFieldData = null;
        let imageData = "";

        // Initialisation de l'√©diteur
        function initEditor() {
            editor = document.getElementById('editor');
            fieldPreview = document.getElementById('fieldPreview');
            
            // √âv√©nements
            editor.addEventListener('keydown', handleTabIndentation);
            editor.addEventListener('selectstart', handleSelectStart);
            
            document.getElementById('btnSave').addEventListener('click', saveContent);
            document.getElementById('btnVisu').addEventListener('click', saveContent);
            
            // Initialiser les champs existants
            convertTagsToFields();
            attachFieldEvents();
        }

        // Sauvegarder le contenu
        function saveContent() {
            document.getElementById('HiddenHtmlContent').value = encodeHtml(editor.innerHTML);
        }

        // Encoder le HTML
        function encodeHtml(str) {
            const map = {
                '&': '&amp;',
                '<': '&lt;',
                '>': '&gt;',
                '"': '&quot;',
                "'": '&#39;'
            };
            return str.replace(/[&<>"']/g, m => map[m]);
        }

        // Commandes d'√©dition
        function execCmd(command) {
            document.execCommand(command, false, null);
            editor.focus();
        }

        // Gestion des images
        function handleImageUpload(input) {
            if (input.files && input.files[0]) {
                const reader = new FileReader();
                reader.onload = e => {
                    imageData = e.target.result;
                    startImagePlacement();
                };
                reader.readAsDataURL(input.files[0]);
            }
        }

        function startImagePlacement() {
            isInsertingField = true;
            editor.style.cursor = 'crosshair';
            
            fieldPreview.textContent = 'Image';
            fieldPreview.className = 'field-preview field-image';
            fieldPreview.style.display = 'block';
            
            document.addEventListener('mousemove', handleMouseMove);
            editor.addEventListener('click', insertImageIntoEditor);
            document.addEventListener('keydown', handleEscapeKey);
            
            showPlacementHelp('Cliquez pour ins√©rer l\'image (√âchap pour annuler)');
        }

        function insertImageIntoEditor(e) {
            if (!isInsertingField) return;

            e.preventDefault();
            e.stopPropagation();

            if (!editor.contains(e.target) && e.target !== editor) return;

            const range = document.caretRangeFromPoint(e.clientX, e.clientY);
            if (range) {
                const img = document.createElement('img');
                img.src = imageData;
                img.style.maxWidth = '100%';
                img.style.height = 'auto';
                img.className = 'editor-image';

                range.insertNode(img);
                range.insertNode(document.createTextNode(' '));
                range.collapse(true);
                
                const selection = window.getSelection();
                selection.removeAllRanges();
                selection.addRange(range);
            }

            stopFieldPlacement();
        }

        // Gestion des champs
        function updateFieldLabel(modalType) {
            const typeSelect = document.getElementById(`${modalType}FieldType`);
            const labelInput = document.getElementById(`${modalType}FieldLabel`);
            const selectedType = typeSelect.value;

            const predefinedLabels = {
                'Date': 'Date',
                'SELECT': 'Choix',
                'CodePostal': 'Code postal',
                'Ville': 'Ville',
                'PC': 'Comptable'
            };

            if (predefinedLabels[selectedType]) {
                labelInput.value = predefinedLabels[selectedType];
                labelInput.disabled = true;
                labelInput.classList.add('disabled-field');
            } else {
                labelInput.disabled = false;
                labelInput.classList.remove('disabled-field');
                if (Object.values(predefinedLabels).includes(labelInput.value)) {
                    labelInput.value = '';
                }
            }
        }

        function openInsertFieldModal() {
            document.getElementById('newFieldType').value = 'Text';
            document.getElementById('newFieldLabel').value = '';
            document.getElementById('newFieldRequired').checked = false;
            updateFieldLabel('new');
            
            document.getElementById('insertFieldModal').style.display = 'block';
            document.getElementById('newFieldLabel').focus();
        }

        function startFieldPlacement() {
            const type = document.getElementById('newFieldType').value;
            let label = document.getElementById('newFieldLabel').value.trim();
            const required = document.getElementById('newFieldRequired').checked;

            if (!label) {
                alert('Veuillez saisir un libell√© pour le champ.');
                return;
            }

            pendingFieldData = { type, label, required };
            closeInsertFieldModal();

            isInsertingField = true;
            editor.style.cursor = 'crosshair';

            fieldPreview.textContent = `${label}${required ? ' *' : ''}`;
            fieldPreview.className = `field-preview field-${type.toLowerCase()}`;
            fieldPreview.style.display = 'block';

            document.addEventListener('mousemove', handleMouseMove);
            editor.addEventListener('click', handleFieldPlacement);
            document.addEventListener('keydown', handleEscapeKey);

            showPlacementHelp('Cliquez pour ins√©rer le champ (√âchap pour annuler)');
        }

        // Fonctions utilitaires
        function handleMouseMove(e) {
            if (!isInsertingField) return;
            fieldPreview.style.left = `${e.pageX + 15}px`;
            fieldPreview.style.top = `${e.pageY - 10}px`;
        }

        function showPlacementHelp(message) {
            let helpDiv = document.getElementById('placementHelp');
            if (!helpDiv) {
                helpDiv = document.createElement('div');
                helpDiv.id = 'placementHelp';
                document.body.appendChild(helpDiv);
            }
            helpDiv.textContent = message;
            helpDiv.style.display = 'block';
        }

        function hidePlacementHelp() {
            const helpDiv = document.getElementById('placementHelp');
            if (helpDiv) helpDiv.style.display = 'none';
        }

        function stopFieldPlacement() {
            isInsertingField = false;
            editor.style.cursor = '';
            fieldPreview.style.display = 'none';
            
            document.removeEventListener('mousemove', handleMouseMove);
            editor.removeEventListener('click', handleFieldPlacement);
            document.removeEventListener('keydown', handleEscapeKey);
            
            hidePlacementHelp();
            pendingFieldData = null;
            editor.focus();
        }

        // Initialisation
        document.addEventListener('DOMContentLoaded', initEditor);
    </script>
</asp:Content>